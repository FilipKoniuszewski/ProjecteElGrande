// <auto-generated />
using System;
using KeepMovinAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KeepMovinAPI.Migrations
{
    [DbContext(typeof(KeepMovinDbContext))]
    [Migration("20220303122658_LocationSeed")]
    partial class LocationSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<Guid>("EventsEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersUserid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventsEventId", "UsersUserid");

                    b.HasIndex("UsersUserid");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExperienceLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<Guid?>("ProfilePicturePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<Guid?>("SportsSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfilePicturePictureId");

                    b.HasIndex("SportsSportId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.EventType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("EventType");

                    b.HasData(
                        new
                        {
                            TypeId = new Guid("cfe5f866-6e87-4df1-b716-daed1903a189"),
                            Name = "Professional"
                        },
                        new
                        {
                            TypeId = new Guid("0c0069f2-d539-49ed-839b-c6a57fd97763"),
                            Name = "Recreational"
                        });
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.ExperienceLevel", b =>
                {
                    b.Property<Guid>("ExperienceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevel");

                    b.HasData(
                        new
                        {
                            ExperienceLevelId = new Guid("a7c2a07f-dbfa-490c-b441-633ba9139b8c"),
                            Name = "Beginner"
                        },
                        new
                        {
                            ExperienceLevelId = new Guid("61ae8989-63c8-40c5-9bce-b1b47d47ea9d"),
                            Name = "Intermediate"
                        },
                        new
                        {
                            ExperienceLevelId = new Guid("481b9f4f-bd46-4abf-a3cb-5932f3e4865a"),
                            Name = "Expert"
                        });
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("0fa5ab47-7d1d-4c70-9d65-e30ab58d612a"),
                            City = "Krakow",
                            Country = "Poland",
                            ZipCode = "30-389"
                        },
                        new
                        {
                            LocationId = new Guid("4effc4c5-0956-4379-97de-1cb9c8e81e70"),
                            City = "Warszawa",
                            Country = "Poland",
                            ZipCode = "30-389"
                        },
                        new
                        {
                            LocationId = new Guid("aba56b62-2138-47a9-9635-fc5f9474a298"),
                            City = "Gdansk",
                            Country = "Poland",
                            ZipCode = "30-389"
                        },
                        new
                        {
                            LocationId = new Guid("8446e4d1-4d55-45e4-a772-6277225399d9"),
                            City = "Opole",
                            Country = "Poland",
                            ZipCode = "30-389"
                        });
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Picture", b =>
                {
                    b.Property<Guid>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PicturePath")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("EventId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Setting", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AboutMe")
                        .HasColumnType("bit");

                    b.Property<bool>("FollowersFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("Location")
                        .HasColumnType("bit");

                    b.Property<bool>("Photo")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviousEvents")
                        .HasColumnType("bit");

                    b.Property<bool>("Statistics")
                        .HasColumnType("bit");

                    b.Property<bool>("UpcomingEvents")
                        .HasColumnType("bit");

                    b.HasKey("SettingsId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sport");

                    b.HasData(
                        new
                        {
                            SportId = new Guid("77d2ac77-5b06-4855-aecd-a857c8f57e03"),
                            Name = "Baseball"
                        },
                        new
                        {
                            SportId = new Guid("9228ccf4-1b16-44e2-8efb-481a1220650d"),
                            Name = "Football"
                        },
                        new
                        {
                            SportId = new Guid("cad9df09-86b4-4be7-9086-4c2295227b6c"),
                            Name = "Cycling"
                        },
                        new
                        {
                            SportId = new Guid("b750c60d-2b76-4dc4-bcf5-8f728f94d229"),
                            Name = "Handball"
                        },
                        new
                        {
                            SportId = new Guid("c2527ea2-2a0b-4ecb-b792-945ce3365199"),
                            Name = "Climbing"
                        },
                        new
                        {
                            SportId = new Guid("ad9c1761-68ce-4bca-a261-ecd287794daf"),
                            Name = "Fishing"
                        },
                        new
                        {
                            SportId = new Guid("bf8a063a-5d90-4486-a23e-962374ff1c8b"),
                            Name = "Running"
                        },
                        new
                        {
                            SportId = new Guid("df47dd35-44fd-40fc-93d0-056741b7e4d2"),
                            Name = "Volleyball"
                        },
                        new
                        {
                            SportId = new Guid("a26917aa-f406-42ba-9c66-93839e9c1e82"),
                            Name = "Basketball"
                        },
                        new
                        {
                            SportId = new Guid("4112f370-fe35-4e76-9b59-79e959f3f9ed"),
                            Name = "Nordic Walking"
                        });
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.User", b =>
                {
                    b.Property<Guid>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Userid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PictureId");

                    b.HasIndex("SettingsId");

                    b.HasIndex("Userid");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<Guid>("FollowedUserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowersUserid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowedUserid", "FollowersUserid");

                    b.HasIndex("FollowersUserid");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("KeepMovinAPI.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeepMovinAPI.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Event", b =>
                {
                    b.HasOne("KeepMovinAPI.Domain.ExperienceLevel", "ExperienceLevel")
                        .WithMany()
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("KeepMovinAPI.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("KeepMovinAPI.Domain.Picture", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePicturePictureId");

                    b.HasOne("KeepMovinAPI.Domain.Sport", "Sports")
                        .WithMany()
                        .HasForeignKey("SportsSportId");

                    b.HasOne("KeepMovinAPI.Domain.EventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("KeepMovinAPI.Domain.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("Location");

                    b.Navigation("ProfilePicture");

                    b.Navigation("Sports");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Picture", b =>
                {
                    b.HasOne("KeepMovinAPI.Domain.Event", null)
                        .WithMany("Pictures")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.UserProfile", b =>
                {
                    b.HasOne("KeepMovinAPI.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("KeepMovinAPI.Domain.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("KeepMovinAPI.Domain.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("KeepMovinAPI.Domain.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingsId");

                    b.HasOne("KeepMovinAPI.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid");

                    b.Navigation("Location");

                    b.Navigation("Organisation");

                    b.Navigation("Picture");

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("KeepMovinAPI.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedUserid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeepMovinAPI.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersUserid")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeepMovinAPI.Domain.Event", b =>
                {
                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
